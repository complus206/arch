// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Serv.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "stdio.h"
#include "stdlib.h"
#include "time.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using boost::shared_ptr;

class ServHandler : virtual public ServIf {
public:
    ServHandler() {
        // Your initialization goes here
        invokeTimes = 0;
    }
    
    void put(const Student& s) {
        // Your implementation goes here
        if(this->invokeTimes == 0)
        {
            start = clock();
        }
        this->invokeTimes++;
        
        if(this->invokeTimes == INVOKE_TIMES)
        {
            clock_t finish = clock();
            double duration = (double)(finish - start) / CLOCKS_PER_SEC;
            printf("received %d times, used %fseconds, data is student no=%d;name='%s';sex=%d;age=%d;\r\n",
                   this->invokeTimes, duration, s.sno, s.sname.c_str(), s.ssex, s.sage);
        }
    }

private:
    uint invokeTimes;
    clock_t start;
};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<ServHandler> handler(new ServHandler());
    shared_ptr<TProcessor> processor(new ServProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
    
    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    printf("server started...\r\n");
    server.serve();
    return 0;
}

