/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "reserve_types.h"

#include <algorithm>



const char* Reserve::ascii_fingerprint = "475E93A1FFF3F7162E18A2434378C299";
const uint8_t Reserve::binary_fingerprint[16] = {0x47,0x5E,0x93,0xA1,0xFF,0xF3,0xF7,0x16,0x2E,0x18,0xA2,0x43,0x43,0x78,0xC2,0x99};

uint32_t Reserve::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reser_no);
          this->__isset.reser_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->card_no);
          this->__isset.card_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hotel_id);
          this->__isset.hotel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_type_id);
          this->__isset.room_type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->arrive_date);
          this->__isset.arrive_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leave_date);
          this->__isset.leave_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time_early);
          this->__isset.time_early = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time_late);
          this->__isset.time_late = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->num_room);
          this->__isset.num_room = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency_ID);
          this->__isset.currency_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->add_bed);
          this->__isset.add_bed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guest_name);
          this->__isset.guest_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guest_type);
          this->__isset.guest_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guest_sex);
          this->__isset.guest_sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contacter);
          this->__isset.contacter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contacter_mobile);
          this->__isset.contacter_mobile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contacter_sex);
          this->__isset.contacter_sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reser_status);
          this->__isset.reser_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reser_status1);
          this->__isset.reser_status1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->settle_status);
          this->__isset.settle_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->print_status);
          this->__isset.print_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->fax_status);
          this->__isset.fax_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fax);
          this->__isset.fax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confirm_method);
          this->__isset.confirm_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confirm_client);
          this->__isset.confirm_client = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->confirm_date);
          this->__isset.confirm_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->other);
          this->__isset.other = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->other_enable);
          this->__isset.other_enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->op_user);
          this->__isset.op_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->op_date);
          this->__isset.op_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->es);
          this->__isset.es = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->payment);
          this->__isset.payment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inspector);
          this->__isset.inspector = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastchecked_date);
          this->__isset.lastchecked_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->amendor);
          this->__isset.amendor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->amend_date);
          this->__isset.amend_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sum_price);
          this->__isset.sum_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sum_sign);
          this->__isset.sum_sign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->num_night);
          this->__isset.num_night = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_no);
          this->__isset.room_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->arrive_now);
          this->__isset.arrive_now = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price_changed);
          this->__isset.price_changed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->double_credit);
          this->__isset.double_credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->add_bed_price);
          this->__isset.add_bed_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->add_bed_num);
          this->__isset.add_bed_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->op_ip);
          this->__isset.op_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hotel_confirm_num);
          this->__isset.hotel_confirm_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->additional_status);
          this->__isset.additional_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hotel_credit);
          this->__isset.hotel_credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->additional_statusI);
          this->__isset.additional_statusI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Room_Credit);
          this->__isset.Room_Credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Guest_Info);
          this->__isset.Guest_Info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gage_status);
          this->__isset.gage_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->halfday_price);
          this->__isset.halfday_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->halfday_sign_price);
          this->__isset.halfday_sign_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gs_es);
          this->__isset.gs_es = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gp_settle_status);
          this->__isset.gp_settle_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guest_country);
          this->__isset.guest_country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->guest_num);
          this->__isset.guest_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->payment_way);
          this->__isset.payment_way = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->payhotel_status);
          this->__isset.payhotel_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trans_num);
          this->__isset.trans_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order_from);
          this->__isset.order_from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->price_source_type);
          this->__isset.price_source_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->room_num_type);
          this->__isset.room_num_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hotel_price_statu);
          this->__isset.hotel_price_statu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_unique_id);
          this->__isset.room_unique_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Credit_Card_No);
          this->__isset.Credit_Card_No = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Phone_Type);
          this->__isset.Phone_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Contacter_Mobile_Type);
          this->__isset.Contacter_Mobile_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Reserve::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Reserve");

  xfer += oprot->writeFieldBegin("reser_no", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reser_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("card_no", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->card_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hotel_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->hotel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_type_id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->room_type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arrive_date", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->arrive_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leave_date", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->leave_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_early", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->time_early);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_late", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->time_late);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_room", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->num_room);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency_ID", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->currency_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("add_bed", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->add_bed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guest_name", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->guest_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guest_type", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->guest_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guest_sex", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->guest_sex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacter", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->contacter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacter_mobile", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->contacter_mobile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacter_sex", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->contacter_sex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reser_status", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->reser_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reser_status1", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->reser_status1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settle_status", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->settle_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("print_status", ::apache::thrift::protocol::T_BYTE, 21);
  xfer += oprot->writeByte(this->print_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fax_status", ::apache::thrift::protocol::T_BYTE, 22);
  xfer += oprot->writeByte(this->fax_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fax", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->fax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 25);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirm_method", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->confirm_method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirm_client", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->confirm_client);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirm_date", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->confirm_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("other", ::apache::thrift::protocol::T_STRING, 29);
  xfer += oprot->writeString(this->other);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("other_enable", ::apache::thrift::protocol::T_BYTE, 30);
  xfer += oprot->writeByte(this->other_enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_user", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->op_user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_date", ::apache::thrift::protocol::T_I64, 32);
  xfer += oprot->writeI64(this->op_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("es", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->es);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payment", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->payment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inspector", ::apache::thrift::protocol::T_STRING, 35);
  xfer += oprot->writeString(this->inspector);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastchecked_date", ::apache::thrift::protocol::T_I64, 36);
  xfer += oprot->writeI64(this->lastchecked_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amendor", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->amendor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amend_date", ::apache::thrift::protocol::T_I64, 38);
  xfer += oprot->writeI64(this->amend_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sum_price", ::apache::thrift::protocol::T_STRING, 39);
  xfer += oprot->writeString(this->sum_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sum_sign", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->sum_sign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_night", ::apache::thrift::protocol::T_STRING, 41);
  xfer += oprot->writeString(this->num_night);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_no", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->room_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arrive_now", ::apache::thrift::protocol::T_BYTE, 43);
  xfer += oprot->writeByte(this->arrive_now);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price_changed", ::apache::thrift::protocol::T_STRING, 44);
  xfer += oprot->writeString(this->price_changed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("double_credit", ::apache::thrift::protocol::T_STRING, 45);
  xfer += oprot->writeString(this->double_credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("add_bed_price", ::apache::thrift::protocol::T_STRING, 46);
  xfer += oprot->writeString(this->add_bed_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("add_bed_num", ::apache::thrift::protocol::T_BYTE, 47);
  xfer += oprot->writeByte(this->add_bed_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_ip", ::apache::thrift::protocol::T_STRING, 48);
  xfer += oprot->writeString(this->op_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hotel_confirm_num", ::apache::thrift::protocol::T_STRING, 49);
  xfer += oprot->writeString(this->hotel_confirm_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("additional_status", ::apache::thrift::protocol::T_I32, 50);
  xfer += oprot->writeI32(this->additional_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hotel_credit", ::apache::thrift::protocol::T_I16, 51);
  xfer += oprot->writeI16(this->hotel_credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("additional_statusI", ::apache::thrift::protocol::T_I32, 52);
  xfer += oprot->writeI32(this->additional_statusI);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Room_Credit", ::apache::thrift::protocol::T_BYTE, 53);
  xfer += oprot->writeByte(this->Room_Credit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Guest_Info", ::apache::thrift::protocol::T_STRING, 54);
  xfer += oprot->writeString(this->Guest_Info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gage_status", ::apache::thrift::protocol::T_BYTE, 55);
  xfer += oprot->writeByte(this->gage_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("halfday_price", ::apache::thrift::protocol::T_STRING, 56);
  xfer += oprot->writeString(this->halfday_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("halfday_sign_price", ::apache::thrift::protocol::T_STRING, 57);
  xfer += oprot->writeString(this->halfday_sign_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gs_es", ::apache::thrift::protocol::T_STRING, 58);
  xfer += oprot->writeString(this->gs_es);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gp_settle_status", ::apache::thrift::protocol::T_BYTE, 59);
  xfer += oprot->writeByte(this->gp_settle_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guest_country", ::apache::thrift::protocol::T_STRING, 60);
  xfer += oprot->writeString(this->guest_country);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("guest_num", ::apache::thrift::protocol::T_I32, 61);
  xfer += oprot->writeI32(this->guest_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payment_way", ::apache::thrift::protocol::T_BYTE, 62);
  xfer += oprot->writeByte(this->payment_way);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payhotel_status", ::apache::thrift::protocol::T_BYTE, 63);
  xfer += oprot->writeByte(this->payhotel_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trans_num", ::apache::thrift::protocol::T_STRING, 64);
  xfer += oprot->writeString(this->trans_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_from", ::apache::thrift::protocol::T_I32, 65);
  xfer += oprot->writeI32(this->order_from);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price_source_type", ::apache::thrift::protocol::T_BYTE, 66);
  xfer += oprot->writeByte(this->price_source_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_num_type", ::apache::thrift::protocol::T_BYTE, 67);
  xfer += oprot->writeByte(this->room_num_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hotel_price_statu", ::apache::thrift::protocol::T_STRING, 68);
  xfer += oprot->writeString(this->hotel_price_statu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_unique_id", ::apache::thrift::protocol::T_STRING, 69);
  xfer += oprot->writeString(this->room_unique_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Credit_Card_No", ::apache::thrift::protocol::T_STRING, 70);
  xfer += oprot->writeString(this->Credit_Card_No);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Phone_Type", ::apache::thrift::protocol::T_BYTE, 71);
  xfer += oprot->writeByte(this->Phone_Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contacter_Mobile_Type", ::apache::thrift::protocol::T_BYTE, 72);
  xfer += oprot->writeByte(this->Contacter_Mobile_Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Reserve &a, Reserve &b) {
  using ::std::swap;
  swap(a.reser_no, b.reser_no);
  swap(a.card_no, b.card_no);
  swap(a.hotel_id, b.hotel_id);
  swap(a.room_type_id, b.room_type_id);
  swap(a.arrive_date, b.arrive_date);
  swap(a.leave_date, b.leave_date);
  swap(a.time_early, b.time_early);
  swap(a.time_late, b.time_late);
  swap(a.num_room, b.num_room);
  swap(a.currency_ID, b.currency_ID);
  swap(a.add_bed, b.add_bed);
  swap(a.guest_name, b.guest_name);
  swap(a.guest_type, b.guest_type);
  swap(a.guest_sex, b.guest_sex);
  swap(a.contacter, b.contacter);
  swap(a.contacter_mobile, b.contacter_mobile);
  swap(a.contacter_sex, b.contacter_sex);
  swap(a.reser_status, b.reser_status);
  swap(a.reser_status1, b.reser_status1);
  swap(a.settle_status, b.settle_status);
  swap(a.print_status, b.print_status);
  swap(a.fax_status, b.fax_status);
  swap(a.email, b.email);
  swap(a.fax, b.fax);
  swap(a.phone, b.phone);
  swap(a.confirm_method, b.confirm_method);
  swap(a.confirm_client, b.confirm_client);
  swap(a.confirm_date, b.confirm_date);
  swap(a.other, b.other);
  swap(a.other_enable, b.other_enable);
  swap(a.op_user, b.op_user);
  swap(a.op_date, b.op_date);
  swap(a.es, b.es);
  swap(a.payment, b.payment);
  swap(a.inspector, b.inspector);
  swap(a.lastchecked_date, b.lastchecked_date);
  swap(a.amendor, b.amendor);
  swap(a.amend_date, b.amend_date);
  swap(a.sum_price, b.sum_price);
  swap(a.sum_sign, b.sum_sign);
  swap(a.num_night, b.num_night);
  swap(a.room_no, b.room_no);
  swap(a.arrive_now, b.arrive_now);
  swap(a.price_changed, b.price_changed);
  swap(a.double_credit, b.double_credit);
  swap(a.add_bed_price, b.add_bed_price);
  swap(a.add_bed_num, b.add_bed_num);
  swap(a.op_ip, b.op_ip);
  swap(a.hotel_confirm_num, b.hotel_confirm_num);
  swap(a.additional_status, b.additional_status);
  swap(a.hotel_credit, b.hotel_credit);
  swap(a.additional_statusI, b.additional_statusI);
  swap(a.Room_Credit, b.Room_Credit);
  swap(a.Guest_Info, b.Guest_Info);
  swap(a.gage_status, b.gage_status);
  swap(a.halfday_price, b.halfday_price);
  swap(a.halfday_sign_price, b.halfday_sign_price);
  swap(a.gs_es, b.gs_es);
  swap(a.gp_settle_status, b.gp_settle_status);
  swap(a.guest_country, b.guest_country);
  swap(a.guest_num, b.guest_num);
  swap(a.payment_way, b.payment_way);
  swap(a.payhotel_status, b.payhotel_status);
  swap(a.trans_num, b.trans_num);
  swap(a.order_from, b.order_from);
  swap(a.price_source_type, b.price_source_type);
  swap(a.room_num_type, b.room_num_type);
  swap(a.hotel_price_statu, b.hotel_price_statu);
  swap(a.room_unique_id, b.room_unique_id);
  swap(a.Credit_Card_No, b.Credit_Card_No);
  swap(a.Phone_Type, b.Phone_Type);
  swap(a.Contacter_Mobile_Type, b.Contacter_Mobile_Type);
  swap(a.__isset, b.__isset);
}


